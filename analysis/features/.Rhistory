data <- read.csv('features.csv')
View(data)
summary(data)
View(data)
data <- read.csv('features.csv')
summary(data)
heatmap
?cm.colors
mat <- data.matrix(data[,4:])
mat <- data.matrix(data[,-1:-3])
View(mat)
ncol(data)
heatmap(mat)
mat <- read.csv('heatmap_good.csv')
mat <- read.csv('heatmap_good.csv',header=FALSE)
heatmap(mat)
mat <- data.matrix(mat)
heatmap(mat)
heatmap(mat,Rowv=NA,Colv=NA)
heatmap(mat,Rowv=NA,Colv=NA,labRow=c('A','C','G','T'))
levelplot(mat)
library(lattice)
levelplot(mat)
levelplot(t(mat)
levelplot(t(mat))
levelplot(t(mat))
levelplot(t(mat),xlab="Position")
mat.rownames <- c("A","C","G","T")
levelplot(t(mat),xlab="Position")
levelplot(t(mat),xlab="Position",ylab="NT")
?levelplot
levelplot(t(mat),xlab="Position",ylab="NT",row.values=mat.rownames)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=mat.rownames)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T')
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
levelplot(t(mat),xlab="Position",ylab="NT",row.values=c('A','C','G','T'))
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
View(mat)
summary(mat)
rownames(mat) <- c("A","C","G","T")
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
colnames(mat) <- c()
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
colnames(mat) <- 1:20
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'))
colors <- colorRampPalette(c('blue','yellow'))(30)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
colors <- colorRampPalette(c('blue','black','yellow'))(30)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
colors <- colorRampPalette(c('blue','black','yellow'))(40)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
colors <- colorRampPalette(c('blue','black','yellow'))(10)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
colors <- colorRampPalette(c('blue','black','yellow'))(20)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
colors <- colorRampPalette(c('blue','black','yellow'))(30)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors,main="Median log ratio for sgRNA's that contain this nucleotide at this postion")
library(lattice)
data <- read.csv('features.csv')
summary(data)
mat <- read.csv('heatmap_good.csv',header=FALSE)
mat <- data.matrix(mat)
rownames(mat) <- c("A","C","G","T")
colnames(mat) <- 1:20
# heatmap(mat,Rowv=NA,Colv=NA,labRow=c('A','C','G','T'))
colors <- colorRampPalette(c('blue','black','yellow'))(30)
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors,main="Median log ratio for sgRNA's that contain this nucleotide at this postion")
levelplot(t(mat),xlab="Position",ylab="NT",col.values=c('A','C','G','T'),col.regions=colors,main="Mean log ratio for sgRNA's that contain this nucleotide at this postion")
features <- read.csv('features.csv')
plot(features$Target ~ features$DistanceFromATG)
plot(features$Target ~ features$DistanceFromATG,xlim(0,200))
plot(features$Target ~ features$DistanceFromATG,xlim=c(0,200))
plot(features$Target ~ features$DistanceFromATG,xlim=c(0,200),main="Poor performance is not an obvious function of distance")
plot(features$Target ~ features$GCperc)
View(features)
boxplot(features$Target ~ features$GCperc)
boxplot(features$Target ~ features$GCperc,ylab="Log ratio",xlab="%GC")
plot(features$Target ~ features$probSeed)
plot(features$Target ~ features$probAll)
plot(features$Target ~ features$bindingEnergy)
plot(features$Target ~ features[,4:ncols(features)])
plot(features$Target ~ features[,4:ncol(features)])
features[,4:8]
plot(features$Target ~ features[,4:ncol(features)])
plot(features[,4:ncol(features)])
plot(features$Target~features$wtT)
plot(features$Target~features$wtA)
